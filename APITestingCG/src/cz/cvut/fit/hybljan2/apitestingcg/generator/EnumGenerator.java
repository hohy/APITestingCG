package cz.cvut.fit.hybljan2.apitestingcg.generator;

import cz.cvut.fit.hybljan2.apitestingcg.apimodel.APIClass;
import cz.cvut.fit.hybljan2.apitestingcg.apimodel.APIField;
import cz.cvut.fit.hybljan2.apitestingcg.apimodel.APIMethod;
import cz.cvut.fit.hybljan2.apitestingcg.configuration.model.GeneratorJobConfiguration;

/**
 * Generate new java source file with new class which tests some Enumeration class from API.
 * Generated class contains:
 *  - test for every Enum field (generated by EnumConstructorMethodGenerator)
 *  - test for every ordinary field (FieldTestMehtodGenerator - same test as in Instantiator)
 *  - test for every method in class (MethodCallerMethodGenerator - same test as in Instantiator)
 *
 * User: Jan HÃ½bl
 * Date: 16.1.12
 * Time: 16:58
 */
public class EnumGenerator extends ClassGenerator {
    @Override
    public void generate(APIClass cls, GeneratorJobConfiguration jobConfiguration) {

        // set name of package for generated class - read new name pattern from configuration and add original package..
        setPackageName(generateName(jobConfiguration.getOutputPackage(), cls.getPackageName()));

        // new class has to import original enumeration
        addImport(cls.getFullName());

        setName(generateName("%sEnumTest", cls.getName())); // TODO: add item into configuration

        // for all of enum fields generate method that tests this field
        for(APIField fld : cls.getFields()) {

            if(fld.getVarType().equals(cls.getName())) { // test if field is enum field or just variable
                MethodGenerator mthGen = new EnumConstructorMethodGenerator(cls.getName(), fld, configuration);
                addConstructor(mthGen);

            } else {  // it's not a enum field but constant or variable. Test it in same way as in Instantiator or Extender.
                MethodGenerator fldGen = new FieldTestMehtodGenerator(cls, fld, cls.getName() + "." + fld.getName(), configuration);
                addMethod(fldGen);
            }

        }

        for(APIMethod mth : cls.getMethods()) {
            MethodGenerator mthGen = new MethodCallerMethodGenerator(mth, cls, configuration);
            addMethod(mthGen);
        }

        generateClassFile();

    }
}
