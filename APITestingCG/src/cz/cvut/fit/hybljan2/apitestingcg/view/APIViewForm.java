/*
 * Copyright(c) Jan Hybl, FIT CTU in Prague. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Common Developmen and Distribution License (CDDL). You can obtain a copy of the CDDL at http://www.netbeans.org/cddl.html.
 */

/*
 * APIViewForm.java
 *
 * Created on 16.10.2011, 16:13:55
 */
package cz.cvut.fit.hybljan2.apitestingcg.view;


import cz.cvut.fit.hybljan2.apitestingcg.apimodel.*;
import cz.cvut.fit.hybljan2.apitestingcg.apimodel.APIItem.Kind;


import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.awt.*;

/**
 * @author Jan HÃ½bl
 */
public class APIViewForm extends javax.swing.JFrame {

    DefaultTreeModel apiTreeModel;
    private API apiModel;

    /**
     * Creates new form APIViewForm
     */
    public APIViewForm(API apiModel) {
        this.apiModel = apiModel;
        apiTreeModel = new DefaultTreeModel(generateAPITree());
        initComponents();
        setTitle(apiModel.getName() + " " + apiModel.getVersion());
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JScrollPane jScrollPane1 = new JScrollPane();
        apiTree = new javax.swing.JTree();
        JScrollPane contentScrollPanel = new JScrollPane();
        contentPanel = new javax.swing.JPanel();
        JLabel jLabel1 = new JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        apiTree.setModel(apiTreeModel);
        apiTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                sourceTreeValueChangedHandler(evt);
            }
        });
        jScrollPane1.setViewportView(apiTree);

        contentPanel.setAlignmentX(5.0F);
        contentPanel.setAlignmentY(5.0F);
        contentPanel.setLayout(new javax.swing.BoxLayout(contentPanel, javax.swing.BoxLayout.Y_AXIS));

        jLabel1.setText("<< Select API Item");
        contentPanel.add(jLabel1);

        contentScrollPanel.setViewportView(contentPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(contentScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(contentScrollPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sourceTreeValueChangedHandler(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_sourceTreeValueChangedHandler
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) apiTree.getLastSelectedPathComponent();
        if (node == null) return;

        APIInfo apiinfo = (APIInfo) node.getUserObject();
        APIItem item = apiinfo.getItem();

        contentPanel.removeAll();

        JLabel nameLabel = new JLabel(item.getName());
        nameLabel.setFont(new Font("Arial", Font.BOLD, 15));
        JLabel fullNameLabel = new JLabel();
        fullNameLabel.setFont(new Font("Arial", Font.PLAIN, 10));

        JLabel itemTypeLabel = new JLabel();
        if (item.getKind() == Kind.PACKAGE) { // If its null then it is package
            itemTypeLabel.setText("package");
        } else {
            itemTypeLabel.setText(item.getKind().toString());
        }

        JLabel modifiersLabel = new JLabel();
        if (item.getModifiers() != null) {
            StringBuilder mods = new StringBuilder("Modifiers:");
            for (APIModifier m : item.getModifiers()) mods.append(' ').append(m.toString());
            modifiersLabel.setText(mods.toString());
        }
        contentPanel.add(itemTypeLabel);
        contentPanel.add(nameLabel);
        contentPanel.add(fullNameLabel);
        if (item.isDepreacated()) {
            contentPanel.add(new JLabel("Deprecated"));
        }
        contentPanel.add(Box.createVerticalStrut(10));
        contentPanel.add(modifiersLabel);
        contentPanel.add(contentPanel.add(Box.createVerticalStrut(10)));

        // add item-type specific content
        switch (item.getKind()) {
            case CLASS:
            case ANNOTATION:
            case ENUM:
            case INTERFACE:
                APIClass cls = (APIClass) item;
                fullNameLabel.setText(cls.getFullName());

                if (cls.getTypeParamsMap() != null) {

                    StringBuilder sb = new StringBuilder();
                    sb.append("<");
                    for (String typeName : cls.getTypeParamsMap().keySet()) {
                        sb.append(typeName).append(" {");
                        for (APIType typeBound : cls.getTypeParamsMap().get(typeName)) {
                            sb.append(typeBound).append(',');
                        }
                        sb.append("}; ");
                    }
                    sb.append(">");
                    JLabel genericsLabel = new JLabel(sb.toString());
                    contentPanel.add(genericsLabel);
                }

                if (cls.getExtending() != null) {
                    JLabel extLabel = new JLabel("Extending: " + cls.getExtending());
                    contentPanel.add(extLabel);
                    contentPanel.add(contentPanel.add(Box.createVerticalStrut(10)));
                }

                if (cls.getImplementing() != null && cls.getImplementing().size() > 0) {
                    StringBuilder imp = new StringBuilder("Implementing:");
                    for (APIType s : cls.getImplementing()) imp.append(' ').append(s);
                    JLabel imlLabel = new JLabel(imp.toString());
                    contentPanel.add(imlLabel);
                    contentPanel.add(contentPanel.add(Box.createVerticalStrut(10)));
                }

                if (cls.getNestedClasses() != null && cls.getNestedClasses().size() > 0) {
                    contentPanel.add(new JLabel("Nested classes:"));
                    for (APIClass nestedClass : cls.getNestedClasses()) {
                        JLabel ncLabel = new JLabel(" " + nestedClass.getFullName().toString());
                        contentPanel.add(ncLabel);
                    }
                    contentPanel.add(contentPanel.add(Box.createVerticalStrut(10)));
                }

                if (cls.getFields() != null && cls.getFields().size() > 0) {
                    contentPanel.add(new JLabel("Fields:"));
                    for (APIField f : cls.getFields()) {
                        contentPanel.add(new JLabel("  " + f.toString()));
                    }
                }

                break;
            case METHOD:
            case CONSTRUCTOR:
                APIMethod mth = (APIMethod) item;

                contentPanel.add(new JLabel("Return type: " + mth.getReturnType()));
                contentPanel.add(contentPanel.add(Box.createVerticalStrut(10)));

                if (mth.getParameters() != null && mth.getParameters().size() > 0) {
                    contentPanel.add(new JLabel("Parameters:"));
                    for (APIMethodParameter f : mth.getParameters()) {
                        contentPanel.add(new JLabel("  " + f.getType()));
                    }
                    contentPanel.add(contentPanel.add(Box.createVerticalStrut(10)));
                }

                if (mth.getThrown() != null && mth.getThrown().size() > 0) {
                    contentPanel.add(new JLabel("Throws:"));
                    for (String s : mth.getThrown()) {
                        contentPanel.add(new JLabel("  " + s));
                    }
                }

                if (mth.getTypeParamsMap() != null) {

                    StringBuilder sb = new StringBuilder();
                    sb.append("<");
                    for (String typeName : mth.getTypeParamsMap().keySet()) {
                        sb.append(typeName).append(" {");
                        for (APIType typeBound : mth.getTypeParamsMap().get(typeName)) {
                            sb.append(typeBound).append(',');
                        }
                        sb.append("}; ");
                    }
                    sb.append(">");
                    JLabel genericsLabel = new JLabel(sb.toString());
                    contentPanel.add(genericsLabel);
                }


        }
        //contentLabel.setText(item.toString());
        contentPanel.updateUI();
    }//GEN-LAST:event_sourceTreeValueChangedHandler

    private DefaultMutableTreeNode generateAPITree() {
        APIItem api = apiModel;
        APIInfo rootInfo = new APIInfo(apiModel);
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(rootInfo);
        for (APIPackage pkg : apiModel.getPackages()) {
            APIInfo pkgInfo = new APIInfo(pkg);
            DefaultMutableTreeNode pkgNode = new DefaultMutableTreeNode(pkgInfo);
            for (APIClass cls : pkg.getClasses()) {
                APIInfo clsInfo = new APIInfo(cls);
                DefaultMutableTreeNode clsNode = new DefaultMutableTreeNode(clsInfo);
                for (APIMethod mth : cls.getConstructors()) {
                    APIInfo mthInfo = new APIInfo(mth);
                    DefaultMutableTreeNode mthNode = new DefaultMutableTreeNode(mthInfo);
                    clsNode.add(mthNode);
                }
                for (APIMethod mth : cls.getMethods()) {
                    APIInfo mthInfo = new APIInfo(mth);
                    DefaultMutableTreeNode mthNode = new DefaultMutableTreeNode(mthInfo);
                    clsNode.add(mthNode);
                }
                pkgNode.add(clsNode);
            }
            root.add(pkgNode);
        }
        return root;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(APIViewForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(APIViewForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(APIViewForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(APIViewForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new APIViewForm(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree apiTree;
    private javax.swing.JPanel contentPanel;
    // End of variables declaration//GEN-END:variables
}

class APIInfo {
    private APIItem item;

    public APIInfo(APIItem item) {
        this.item = item;
    }

    @Override
    public String toString() {
        return item.getName();
    }

    public APIItem getItem() {
        return item;
    }


}