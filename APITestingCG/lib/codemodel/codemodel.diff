diff -Naur codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JClass.java codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JClass.java
--- codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JClass.java	2012-10-18 23:32:30.114982029 +0200
+++ codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JClass.java	2010-12-03 15:53:58.000000000 +0100
@@ -316,15 +316,6 @@
     }
 
     /**
-     * Create "? super T" from T.
-     *
-     * @return never null
-     */
-    public final JClass spr() {
-        return new JTypeSWildcard(this);
-    }    
-    
-    /**
      * Substitutes the type variables with their actual arguments.
      * 
      * <p>
diff -Naur codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JDefinedClass.java codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JDefinedClass.java
--- codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JDefinedClass.java	2012-03-13 17:29:47.949658625 +0100
+++ codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JDefinedClass.java	2011-04-15 17:01:54.000000000 +0200
@@ -776,14 +776,14 @@
         f.g(mods).p(classType.declarationToken).id(name).d(generifiable);
 
         if (superClass != null && superClass != owner().ref(Object.class))
-            f.i().p("extends").g(superClass).o();
+            f.nl().i().p("extends").g(superClass).nl().o();
 
         if (!interfaces.isEmpty()) {
-//            if (superClass == null)
-//                f.nl();
+            if (superClass == null)
+                f.nl();
             f.i().p(classType==ClassType.INTERFACE ? "extends" : "implements");
             f.g(interfaces);
-            f/*.nl()*/.o();
+            f.nl().o();
         }
         declareBody(f);
     }
diff -Naur codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JDirectClass.java codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JDirectClass.java
--- codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JDirectClass.java	2012-03-14 01:40:42.456756529 +0100
+++ codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JDirectClass.java	2010-12-03 15:53:58.000000000 +0100
@@ -41,7 +41,6 @@
 package com.sun.codemodel;
 
 import java.util.Iterator;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Collections;
 
@@ -61,27 +60,9 @@
     }
 
     public String name() {
-        return shortName(fullName);
-    }
-
-    public static String shortName(String rawName) {
-        rawName = rawName.trim();
-        for(int i = 0; i < rawName.length(); i++) {
-            switch(rawName.charAt(i)) {
-                case '<':
-                    return shortName(rawName.substring(0, i)) + '<' + shortName(rawName.substring(i+1));
-                case '>':
-                    return shortName(rawName.substring(0, i)) + '>' + shortName(rawName.substring(i+1));
-                case ',':
-                    return shortName(rawName.substring(0, i)) + ", " + shortName(rawName.substring(i+1));
-            }
-        }
-
-        int x = rawName.lastIndexOf('.');
-        if(x>=0) {
-            return rawName.substring(x+1);
-        }
-        return rawName;
+        int i = fullName.lastIndexOf('.');
+        if(i>=0)    return fullName.substring(i+1);
+        return fullName;
     }
 
     public String fullName() {
diff -Naur codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JFormatter.java codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JFormatter.java
--- codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JFormatter.java	2012-05-11 10:29:54.133269146 +0200
+++ codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JFormatter.java	2011-01-03 16:01:14.000000000 +0100
@@ -42,7 +42,13 @@
 
 import java.io.PrintWriter;
 import java.io.Writer;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
 
 
 /**
@@ -170,7 +176,7 @@
         if ((c1 == ',') || (c1 == '=')) return true;
         if (c2 == '=') return true;
         if (Character.isDigit(c1)) {
-            if ((c2 == '(') || (c2 == ')') || (c2 == ';') || (c2 == ',') || (c2 == '<') || (c2 == '.'))
+            if ((c2 == '(') || (c2 == ')') || (c2 == ';') || (c2 == ','))
                 return false;
             return true;
         }
@@ -271,12 +277,10 @@
             if(importedClasses.contains(type)) {
                 p(type.name()); // FQCN imported or not necessary, so generate short name
             } else {
-
-                if(type.outer()!=null) {
+                if(type.outer()!=null)
                     t(type.outer()).p('.').p(type.name());
-                } else {
-                    p(shortName(type.fullName())); // collision was detected, so generate FQCN
-                }
+                else
+                    p(type.fullName()); // collision was detected, so generate FQCN
             }
             break;
         case COLLECTING:
@@ -293,33 +297,6 @@
         return this;
     }
 
-    public String shortName(String rawName) {
-        rawName = rawName.trim();
-        for(int i = 0; i < rawName.length(); i++) {
-            switch(rawName.charAt(i)) {
-                case '<':
-                    return shortName(rawName.substring(0, i)) + '<' + shortName(rawName.substring(i+1));
-                case '>':
-                    return shortName(rawName.substring(0, i)) + '>' + shortName(rawName.substring(i+1)) + ' ';
-                case ',':
-                    return shortName(rawName.substring(0, i)) + ", " + shortName(rawName.substring(i+1));
-            }
-        }
-
-        for(JClass ic : importedClasses) {
-            if(ic.fullName().equals(rawName)) {
-                int idx = rawName.lastIndexOf('.');
-                if(idx >= 0) {
-                    return rawName.substring(idx+1);
-                } else {
-                    return rawName;
-                }
-            }
-        }
-
-        return rawName;
-    }    
-    
     /**
      * Print an identifier
      */
@@ -435,31 +412,11 @@
             if(!tl.collisions(c) && !tl.isId()) {
                 assert tl.getClasses().size() == 1;
 
-                JClass clsToImport = tl.getClasses().get(0);
-                String fullName = clsToImport.fullName();
-                Set<String> types = getTypesList(fullName);
-
-                for(String type : types) {
-                    int i = type.lastIndexOf('.');
-                    String shortTypeName = type;
-                    if(i >= 0) {
-                        shortTypeName = type.substring(i+1);
-                    }
-                    JClass typeClassRef;
-                    if(collectedReferences.containsKey(shortTypeName)
-                            && collectedReferences.get(shortTypeName).classes.size() > 0) {
-                        typeClassRef = collectedReferences.get(shortTypeName).getClasses().get(0);
-                    } else {
-                        typeClassRef =  c.owner().ref(type);
-                    }
-
-                    importedClasses.add(typeClassRef);
-
-                }
+                // add to list of collected types
+                importedClasses.add(tl.getClasses().get(0));
             }
         }
 
-
         // the class itself that we will be generating is always accessible
         importedClasses.add(c);
 
@@ -484,125 +441,15 @@
                 if (clazz instanceof JNarrowedClass) {
                     clazz = clazz.erasure();
                 }
-
+                
                 p("import").p(clazz.fullName()).p(';').nl();
             }
         }
-
-        // generate import statements
-/*        JClass[] imports = importedClasses.toArray(new JClass[importedClasses.size()]);
-        Arrays.sort(imports);
-        HashSet<String> importedClasses = new HashSet<String>();
-        System.out.println("---");
-        for (JClass clazz : imports) {
-            // suppress import statements for primitive types, built-in types,
-            // types in the root package, and types in
-            // the same package as the current type
-            if(!supressImport(clazz, c)) {
-                if (clazz instanceof JNarrowedClass) {
-                    clazz = clazz.erasure();
-                }
-
-                System.out.println(clazz.fullName());
-
-                Set<String> typeList = getTypesList(clazz.fullName());
-
-                for(String className : typeList) {
-                    ReferenceList rl = collectedReferences.get(className);
-                    boolean alreadyImported = findTypeParam(className, c);
-
-                    if((rl != null && rl.isId()) || className.startsWith("?")) {
-                        alreadyImported = true;
-                    }
-//                    for(JClass icls : imports) {
-//                        if(icls.fullName().equals(className)) {
-//                            alreadyImported = true;
-//                            break;
-//                        }
-//                    }
-                    if(!alreadyImported && !importedClasses.contains(className)) {
-                        System.out.println("I:" + className);
-                        p("import").p(className).p(';').nl();
-                        importedClasses.add(className);
-                    }
-                }
-
-//                String fullName = clazz.fullName().trim();
-//                int j = fullName.indexOf('<');
-//                if(j >= 0) {
-//		            String cleanName = clazz.fullName().substring(0, j);
-//                    String typeParams = fullName.substring(j+1, fullName.length()-1);
-//                    typeParams = cleanName + "," + typeParams;
-//                    String[] typeParamNames = typeParams.split(",");
-//
-//                    for(String className : typeParamNames) {
-//                        className = className.trim();
-//                        ReferenceList rl = collectedReferences.get(className);
-//                        boolean alreadyImported = findTypeParam(className, c);
-////                        for(JClass tv : c.typeParams()) {
-////                            if(tv.name().equals(className)) {
-////                                alreadyImported = true;
-////                                break;
-////                            }
-////                        }
-//                        if((rl != null && rl.isId()) || className.startsWith("?")) {
-//                            alreadyImported = true;
-//                        }
-//                        for(JClass icls : imports) {
-//                            if(icls.fullName().equals(className)) {
-//                                alreadyImported = true;
-//                                break;
-//                            }
-//                        }
-//                        if(!alreadyImported && !importedClasses.contains(className)) {
-//                            p("import").p(className).p(';').nl();
-//                            importedClasses.add(className);
-//                        }
-//
-//                    }
-//                } else if(!importedClasses.contains(fullName)) {
-//		            p("import").p(fullName).p(';').nl();
-//                    importedClasses.add(fullName);
-//                }
-            }
-        }     */
         nl();
 
         d(c);
     }
 
-    public static Set<String> getTypesList(String typeString) {
-        Set<String> result = new HashSet<String>();
-        typeString = typeString.replaceAll(">", "");
-        typeString = typeString.replaceAll("\\[", "");
-        typeString = typeString.replaceAll("\\]", "");
-        typeString = typeString.replaceAll("<", ",");
-        typeString = typeString.replaceAll("extends", ",");
-        typeString = typeString.replaceAll("super", ",");
-        String[] s1 = typeString.split(",");
-        for(String str1 : s1) {
-            String cleanName = str1.trim();
-            if(cleanName.length() > 0) result.add(cleanName);
-        }
-        return result;
-    }
-    
-    private boolean findTypeParam(String typeParam, JDefinedClass cls) {
-        for(JClass tv : cls.typeParams()) {
-            if(tv.name().equals(typeParam)) {
-                return true;
-            }
-        }
-        if(cls.classes() != null) {
-            for(Iterator<JDefinedClass> iterator = cls.classes(); iterator.hasNext(); ) {
-                if(findTypeParam(typeParam, iterator.next())) {
-                    return true;
-                };
-            }
-        }
-        return false;
-    }
-
     /**
      * determine if an import statement should be supressed
      *
@@ -720,4 +567,4 @@
             return id && classes.size() == 0;
         }
     }
-}
\ Chybí znak konce řádku na konci souboru
+}
diff -Naur codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JGenerifiableImpl.java codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JGenerifiableImpl.java
--- codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JGenerifiableImpl.java	2012-04-22 23:30:09.821495900 +0200
+++ codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JGenerifiableImpl.java	2010-12-03 15:53:58.000000000 +0100
@@ -63,7 +63,7 @@
                 if(i!=0)    f.p(',');
                 f.d(typeVariables.get(i));
             }
-            f.p(JFormatter.CLOSE_TYPE_ARGS);
+            f.p('>');
         }
     }
 
diff -Naur codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JMethod.java codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JMethod.java
--- codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JMethod.java	2012-04-12 13:43:08.994034737 +0200
+++ codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JMethod.java	2011-02-06 13:01:16.000000000 +0100
@@ -423,7 +423,6 @@
         f.g(mods);
         
         // declare the generics parameters
-        f.p(' ');
 		super.declare(f);
 
 		if (!isConstructor())
@@ -450,7 +449,7 @@
 
 		f.o().p(')');
 		if (_throws!=null && !_throws.isEmpty()) {
-			f.i().p("throws").g(_throws).o();
+			f.nl().i().p("throws").g(_throws).nl().o();
 		}
         
         if (defaultValue != null) {
diff -Naur codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JMods.java codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JMods.java
--- codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JMods.java	2012-10-22 21:21:16.470512048 +0200
+++ codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JMods.java	2011-04-15 17:01:54.000000000 +0200
@@ -122,10 +122,6 @@
     public void setSynchronized(boolean newValue) {
         setFlag(JMod.SYNCHRONIZED, newValue);
     }
-    
-    public void setAbstract(boolean newValue) {
-        setFlag(JMod.ABSTRACT, newValue);
-    }
 
     public void setPrivate() {
         setFlag(JMod.PUBLIC, false);
diff -Naur codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JTypeSWildcard.java codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JTypeSWildcard.java
--- codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JTypeSWildcard.java	2012-10-18 23:07:25.499799895 +0200
+++ codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JTypeSWildcard.java	1970-01-01 01:00:00.000000000 +0100
@@ -1,124 +0,0 @@
-/*
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
- *
- * Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.
- *
- * The contents of this file are subject to the terms of either the GNU
- * General Public License Version 2 only ("GPL") or the Common Development
- * and Distribution License("CDDL") (collectively, the "License").  You
- * may not use this file except in compliance with the License.  You can
- * obtain a copy of the License at
- * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
- * or packager/legal/LICENSE.txt.  See the License for the specific
- * language governing permissions and limitations under the License.
- *
- * When distributing the software, include this License Header Notice in each
- * file and include the License file at packager/legal/LICENSE.txt.
- *
- * GPL Classpath Exception:
- * Oracle designates this particular file as subject to the "Classpath"
- * exception as provided by Oracle in the GPL Version 2 section of the License
- * file that accompanied this code.
- *
- * Modifications:
- * If applicable, add the following below the License Header, with the fields
- * enclosed by brackets [] replaced by your own identifying information:
- * "Portions Copyright [year] [name of copyright owner]"
- *
- * Contributor(s):
- * If you wish your version of this file to be governed by only the CDDL or
- * only the GPL Version 2, indicate your decision by adding "[Contributor]
- * elects to include this software in this distribution under the [CDDL or GPL
- * Version 2] license."  If you don't indicate a single choice of license, a
- * recipient has the option to distribute your version of this file under
- * either the CDDL, the GPL Version 2 or to extend the choice of license to
- * its licensees as provided above.  However, if you add GPL Version 2 code
- * and therefore, elected the GPL Version 2 license, then the option applies
- * only if the new code is made subject to such option by the copyright
- * holder.
- */
-
-package com.sun.codemodel;
-
-import java.util.Iterator;
-import java.util.List;
-
-/**
- * Represents a wildcard type like "? extends Foo".
- *
- * <p>
- * Instances of this class can be obtained from {@link JClass#wildcard()}
- *
- * TODO: extend this to cover "? super Integer".
- *
- * <p>
- * Our modeling of types are starting to look really ugly.
- * ideally it should have been done somewhat like APT,
- * but it's too late now.
- *
- * @author Kohsuke Kawaguchi
- */
-final class JTypeSWildcard extends JClass {
-
-    private final JClass bound;
-
-    JTypeSWildcard(JClass bound) {
-        super(bound.owner());
-        this.bound = bound;
-    }
-
-    public String name() {
-        return "? super "+bound.name();
-    }
-
-    public String fullName() {
-        return "? super "+bound.fullName();
-    }
-
-    public JPackage _package() {
-        return null;
-    }
-
-    /**
-     * Returns the class bound of this variable.
-     *
-     * <p>
-     * If no bound is given, this method returns {@link Object}.
-     */
-    public JClass _extends() {
-        if(bound!=null)
-            return bound;
-        else
-            return owner().ref(Object.class);
-    }
-
-    /**
-     * Returns the interface bounds of this variable.
-     */
-    public Iterator<JClass> _implements() {
-        return bound._implements();
-    }
-
-    public boolean isInterface() {
-        return false;
-    }
-
-    public boolean isAbstract() {
-        return false;
-    }
-
-    protected JClass substituteParams(JTypeVar[] variables, List<JClass> bindings) {
-        JClass nb = bound.substituteParams(variables,bindings);
-        if(nb==bound)
-            return this;
-        else
-            return new JTypeSWildcard(nb);
-    }
-
-    public void generate(JFormatter f) {
-        if(bound._extends()==null)
-            f.p("?");   // instead of "? extends Object"
-        else
-            f.p("? super").g(bound);
-    }
-}
diff -Naur codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JTypeVar.java codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JTypeVar.java
--- codemodel-2.5-SNAPSHOT-sources/com/sun/codemodel/JTypeVar.java	2012-04-14 17:34:50.060267351 +0200
+++ codemodel-2.5-SNAPSHOT-sources-original/com/sun/codemodel/JTypeVar.java	2010-12-03 15:53:58.000000000 +0100
@@ -40,7 +40,6 @@
 
 package com.sun.codemodel;
 
-import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 
@@ -54,8 +53,8 @@
 public final class JTypeVar extends JClass implements JDeclaration {
     
     private final String name;
-
-    private List<JClass> bounds = new ArrayList<>();
+    
+    private JClass bound;
 
     JTypeVar(JCodeModel owner, String _name) {
         super(owner);
@@ -80,7 +79,9 @@
      * @return  this
      */
     public JTypeVar bound( JClass c ) {
-        bounds.add(c);
+        if(bound!=null)
+            throw new IllegalArgumentException("type variable has an existing class bound "+bound);
+        bound = c;
         return this;
     }
 
@@ -91,8 +92,8 @@
      * If no bound is given, this method returns {@link Object}.
      */
     public JClass _extends() {
-        if ((bounds.size() > 0) && (!bounds.get(0).isInterface()))
-            return bounds.get(0);
+        if(bound!=null)
+            return bound;
         else
             return owner().ref(Object.class);
     }
@@ -101,10 +102,7 @@
      * Returns the interface bounds of this variable.
      */
     public Iterator<JClass> _implements() {
-        if ((bounds.size() > 0) && (!bounds.get(0).isInterface()))
-            return bounds.subList(1, bounds.size()).iterator();
-        else
-            return bounds.iterator();
+        return bound._implements();
     }
 
     public boolean isInterface() {
@@ -120,11 +118,8 @@
      */
     public void declare(JFormatter f) {
         f.id(name);
-        if (bounds.size() > 0) {
-            f.p("extends").g(bounds.get(0));
-            for (int i = 1 ; i < bounds.size() ; ++i)
-                f.p(" & ").g(bounds.get(i));
-        }
+        if(bound!=null)
+            f.p("extends").g(bound);
     }
 
 
